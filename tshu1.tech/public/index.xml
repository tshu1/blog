<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Try and Error</title>
    <link>https://tshu1.tech/</link>
    <description>Recent content on Try and Error</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 04 Jan 2021 00:30:03 +0900</lastBuildDate><atom:link href="https://tshu1.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automatic Updates</title>
      <link>https://tshu1.tech/posts/2021-01-04/</link>
      <pubDate>Mon, 04 Jan 2021 00:30:03 +0900</pubDate>
      
      <guid>https://tshu1.tech/posts/2021-01-04/</guid>
      <description>この記事について  CentOSの終了に伴って、Ubuntuへ移行するとしたら、どのような設定を実施するかを調査し、実際に設定した内容についてまとめるものです 項目が多岐に渡るので、空いた時間でアウトプットできる単位で、まとめていきます すべてを試す訳ではなく、必要と思われるものや今後使えそうなものについて記載していきます 構築するにあたり、ansibleで実装していきます  参考ドキュメント https://ubuntu.com/server/docs/installation
前提  検証用のサーバとして構築する  Automatic Updates タスクの新規作成 --- /dev/null +++ b/base/tasks/automatic-updates.yml @@ -0,0 +1,5 @@ +--- +- name: Automatic Updates + apt: + name: unattended-upgrades + state: present diff --git a/base/tasks/main.yml b/base/tasks/main.yml index 99a3e15..efa92af 100644 --- a/base/tasks/main.yml +++ b/base/tasks/main.yml @@ -1,2 +1,3 @@  --- # tasks file for base +- include: automatic-updates.yml ansible実行 22:21 $ ansible-playbook -i inventory -l ubuntu -b playbook.</description>
    </item>
    
    <item>
      <title>ブログをロリポップ！で公開する</title>
      <link>https://tshu1.tech/posts/my-first-posts/</link>
      <pubDate>Sun, 25 Oct 2020 22:48:42 +0900</pubDate>
      
      <guid>https://tshu1.tech/posts/my-first-posts/</guid>
      <description>なぜ、ロリポップ！ 私が関わっているサービスだから。 3年半ぶりに、復帰することになり、改めて自分の係るサービスを使って良し悪しを体験したいと思ったから。
ブログツールの選定 世の中にはいろんなブログサービス(Amebaブログ/はてなブログ/JUGEM/note/etc&amp;hellip;)やCMS(Wordpress/Drupal/Joomla/etc&amp;hellip;)がありますが、私は以下の理由で静的ジェネレータが良いと考えてます。
 動作が軽量で、ページの表示速度が早い 静的ページなので、セキュリティがリスクが低い 移行が容易  静的ジェネレータの選定 ここは、個人の趣味趣向になるかと思います。私は、Golangの勉強を始めようと考えていたところだったので、Golang製のものがあればそれにしようと考えていたので、HUGO一択でした。 静的ジェネレータで検索するといろいろと出てきますので、試してみてから決めるというのも1つの方法だと思います。
HUGOのインストールと設定 まずは、Quick Startに従ってひとまず動かして見るというのをおすすめします。 その後、自分の気に入ったテーマを探してみて気に入ったテーマのサイトに従ってテーマのインストールと設定を進めていきます。 私は、Binarioを選択しました。 最近更新されていたのと、configのサンプルもあり、マニュアル的なものも必要十分だったのが決め手です。もちろんデザインもですがｗ
以下のような感じで、設定をいじっては、ブラウザで表示して何がどうなったかを確認することを繰り返していくと、ある程度手元のPC上にブログの環境が整っていきます。
$ vim config.toml $ hugo server -D ブラウザで確認 納得の行く設定が出来たら、ブログを公開していきます。
ロリポップ！へのデプロイ ロリポップでは、gitが使えるので、手元のPCでビルドしたコードをGithubで管理し、サーバ上からGithubのコードをPullする形でデプロイを実現しようと思います。 GithubActions使ってブログ記事が更新されたらPushするというのもできなくなないと思いますが、SSH鍵の管理とかぱっと思いつかなかったので、まずはお手軽に実現できる方法で設定しておきます。 より良い方法が見つかったら、変更するようにします。
HUGOのビルド ビルドを実行して、静的ファイルを生成します。
hugo -D ビルドが完了するとpublicフォルダ配下にファイルが生成されるので、public配下をgit addして、commit後、githubへpushしておきます。
独自ドメイン設定 せっかくなので、ムームードメインでドメインを取得して、独自ドメインを設定します。 週末50円のセールしていたのですが、技術的なブログを書こうかと考えていたので、tshu1.techドメインを218円でゲット。
独自ドメインの公開フォルダを設定する 今回は、Githubのディレクトリ構成が以下のようになっているので、それに合わせる形で公開フォルダを設定する
blog - tshu1.tech(hugo new site で指定した名前) - public - index.html 設定した公開フォルダ
blog/tshu1.tech/public SSHを有効にする ロリポップ！のユーザ専用ページから、SSHを有効にします。 有効にしたら、Terminalソフトを使用してサーバへSSHログインしておきます。
ブログのリポジトリをcloneする 先程、githubへpushした静的ファイルをサーバへダウンロードします。
git clone URL blog 定期的にcloneするようにcronの設定を有効にする 定期実行するスクリプトを作成します。 このスクリプトもブログと一緒に管理しておきます。
#!/bin/sh cd ~/web/blog git pull origin main  github管理のディレクトリ構成は以下のとおり  blog/ ├── README.</description>
    </item>
    
  </channel>
</rss>
